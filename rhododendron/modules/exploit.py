import re, nmap, os

from .printer import Printer
from .alu import Tool

class Rhododendron(object):
    """
    Nmap scan and Search Exploit and etc...
    """
    def __init__(self):
        self.ip              = None 
        self.echo            = Printer()
        self.tool            = Tool()
        self.find            = False
        self.history         = list()
        
        # Create a node in the file.
        try: os.scandir("./rhododendron/loge/history")
        except FileNotFoundError: os.mkdir('./rhododendron/loge'); os.mknod('./rhododendron/loge/history')
        except Exception: pass

    def nmap(self, ip: str) -> list():
        """
        python-nmap is a python library which helps in using nmap port scanner. 
        It allows to easilly manipulate nmap scan results and will 
        be a perfect tool for systems administrators who want to automatize scanning 
        task and reports. It also supports nmap script outputs.
        :nmap: scan device ports
        """
        Mydict = dict()
        try:
            self.ip = re.findall(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', ip)[-1] # Return a list of all non-overlapping matches in the string.
            if self.ip == '': self.echo.print_error("Nmap", 'The ip is wroing'); sys.exit(0)
            scan = nmap.PortScanner() # PortScanner class allows to use nmap from python
            scan.scan(
                #:param hosts:
                # string for hosts as nmap use it 'scanme.nmap.org'
                # or '198.116.0-255.1-127' or '216.163.128.20/20' 
                # :param ports: string for ports as nmap use it '22,53,110,143-4564' 
                # :param arguments: string of arguments for nmap '-sU -sX -sC' 
                # :param sudo: launch nmap with sudo if True
                hosts=self.ip, 
                arguments='-sV -sC -T5' 
                )

            try:
                for i in scan[self.ip]['tcp']:
                    # Example -> {nmap;port: tcp;product;cpe;version}
                    Mydict['nmap;' + str(i)] = 'tcp' + ';' + scan[self.ip]['tcp'][i]['product'] + ';' + scan[self.ip]['tcp'][i]['cpe'] + ';' + scan[self.ip]['tcp'][i]['version']
            except Exception:
                pass

            try:
                for i in scan[self.ip]['udp']:
                    # Example -> {nmap;port: udp;product;cpe;version}
                    Mydict['nmap;' + str(i)] = 'udp' + ';' + scan[self.ip]['udp'][i]['product'] + ';' + scan[self.ip]['udp'][i]['cpe'] + ';' + scan[self.ip]['udp'][i]['version']
            except Exception:
                pass

            self.tool.details(Mydict)
            
            return Mydict

        except Exception as e:
            self.echo.print_error('Nmap', e)
            sys.exit(0)

    def find_exploit(self, product: str, version: str, port: str):
        """
        Search Exploit in Database 
        :title: To exploit
        :type: local or rmote exploit
        :Platform: system name 
        :File: path the script 
        """
        Mydict = dict()

        if product == '' and version == '': self.echo.print_error("Search Exploit", 'Not Find Infromation'); return
        
        try:
            exploit_db_show = self.tool.sqlite(product, version)
            if not exploit_db_show: self.echo.print_out1('{}:{}'.format(self.ip, port), 'Not find exploit!'); return
            # ------------------------- #
            Mydict['exploit'] = ';'.join(exploit_db_show[0])
            self.tool.details(Mydict, port=port)
            return exploit_db_show[0][0]

            
           
        except Exception as e: self.echo.print_error("Find Exploit", e)
            
